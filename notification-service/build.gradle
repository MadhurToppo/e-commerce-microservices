plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.madhurtoppo.microservices'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(25)
	}
}

repositories {
	mavenCentral()
	maven { url "https://packages.confluent.io/maven/" }
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.apache.avro:avro:1.11.3')
	implementation 'io.confluent:kafka-avro-serializer:7.6.0'
	implementation 'io.confluent:kafka-schema-registry-client:7.6.0'
	implementation('com.github.loki4j:loki-logback-appender:1.4.2')
	runtimeOnly('io.micrometer:micrometer-registry-prometheus')
	implementation('io.micrometer:micrometer-tracing-bridge-brave')
	implementation('io.zipkin.reporter2:zipkin-reporter-brave')
	implementation('org.springframework.boot:spring-boot-starter-aop')
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	compileOnly('org.projectlombok:lombok')
	annotationProcessor('org.projectlombok:lombok')
	testCompileOnly('org.projectlombok:lombok')
	testAnnotationProcessor('org.projectlombok:lombok')
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.bootBuildImage {
    imageName = "madhurtoppo/${project.name}:latest"
    publish = true
    docker {
        publishRegistry {
            username = "madhurtoppo"
            password = System.getenv('DOCKER_PASSWORD') ?: System.getProperty('DOCKER_PASSWORD', '')
        }
    }
    builder = 'paketobuildpacks/builder-jammy-java-tiny'
    imagePlatform = 'linux/arm64'
}