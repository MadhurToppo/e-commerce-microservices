plugins {
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'org.flywaydb.flyway' version '9.22.3'
}

group = 'com.madhurtoppo.microservices'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
}

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    runtimeOnly('org.postgresql:postgresql')
    implementation('org.flywaydb:flyway-core')
    implementation('org.flywaydb:flyway-database-postgresql')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('io.github.wimdeblauwe:error-handling-spring-boot-starter:4.6.0')
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6')
    implementation('org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j')
    implementation 'org.springframework.kafka:spring-kafka'
    implementation('org.apache.avro:avro:1.11.4')
    implementation 'io.confluent:kafka-avro-serializer:7.6.0'
    implementation 'io.confluent:kafka-schema-registry-client:7.6.0'
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    developmentOnly('org.springframework.boot:spring-boot-docker-compose')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.rest-assured:rest-assured')
    testImplementation('org.springframework.boot:spring-boot-testcontainers')
    testImplementation('org.testcontainers:postgresql')
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:kafka'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

flyway {
    url = System.getenv('JDBC_DATABASE_URL') ?: 'jdbc:postgresql://localhost:5432/orderservice'
    user = System.getenv('JDBC_DATABASE_USERNAME') ?: 'postgres'
    password = System.getenv('JDBC_DATABASE_PASSWORD') ?: 'P4ssword!'
    schemas = ['public']
    locations = ['classpath:db/migration']
}

tasks.withType(Test) {
    useJUnitPlatform()
}
